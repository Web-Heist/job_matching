
          # 💼 Resume Matcher with Gemini + FastAPI

This project enables intelligent matching of resumes to job postings using both traditional scoring methods and Google Gemini's semantic understanding. It leverages FastAPI, SQLAlchemy, and Gemini's powerful LLM capabilities to deliver accurate, AI-enhanced candidate-job matches — now optimized with **parallel processing** and **top 3 best job results**.

---

## 🚀 Features

* 📄 Upload and store **multiple job descriptions** and **resumes**
* 🧠 **Semantic matching** using Google Gemini (LLM)
* 📊 **Cosine similarity scoring** for skills, experience, and education
* ⚡ FastAPI backend with RESTful API endpoints
* 🛢️ SQLAlchemy ORM + SQLite/PostgreSQL database
* 📂 Resume upload support (`.pdf`, `.docx`)
* ⚙️ **Parallelized job matching** for speed optimization
* 🏆 Returns **Top 3 best-matching jobs** per resume

---

## ⚙️ Tech Stack

* **Backend**: FastAPI
* **Database**: SQLite or PostgreSQL (via SQLAlchemy)
* **AI API**: Google Gemini (`gemini-1.5-pro`)
* **Resume Parsing**: `pdfplumber`, `docx2txt`
* **Parallel Processing**: Python `asyncio`, `concurrent.futures`

---
## 📁 Folder Structure

```
backend/
│   ├── main.py            # FastAPI app entry
│   ├── models.py          # SQLAlchemy models
│   ├── database.py         
│   ├──db.sqlite3
│   ├── matcher.py         # Matching logic (cosine + Gemini)
frontend/
    ├── index.html
    ├── style.css
    ├── script.js

```

## 🔧 How It Works

### 1. Upload Job Posts

Admins or recruiters add job posts with title, description, required skills, experience, and education.

### 2. Upload Resumes

Users upload resumes, which are parsed into structured fields (`skills`, `experience`, `education`, etc.) and stored in the DB.

### 3. Match Process

For each resume:

* Cosine similarity is calculated for skill, experience, and education.
* Gemini API is used to generate a **semantic score** between job and resume.
* Scores are **combined** for ranking.
* Matching is **parallelized** for speed.
* **Top 3 jobs** are returned based on combined score.

---

## 📦 Installation

```bash
git clone https://github.com/Web-Heist/job_matching
cd job_matching/backend
```

### ▶️ Run the App

```bash
uvicorn app.main:app --reload
```

Open your browser at:
👉 [http://localhost:8000/docs](http://localhost:8000/docs)

---

## 🔐 Environment Variables


GEMINI_API_KEY=your_google_gemini_api_key

## 🧠 Gemini Integration

We use Gemini’s `generateContent` endpoint with `gemini-2.5-pro` to calculate semantic matching between job descriptions and resumes.


Ensure you have:

* ✅ Active Google Cloud project
* ✅ Gemini API enabled
* ✅ Valid `API_KEY` or authentication via Vertex AI

---

## ✅ Output Example

```bash
[Gemini] Job: Robotics Engineer, Gemini Score: 8.5, Combined Score: 27.3  
[Gemini] Job: Automation Specialist, Gemini Score: 7.2, Combined Score: 26.1  
[Gemini] Job: Mechatronics Engineer, Gemini Score: 6.9, Combined Score: 24.8  


